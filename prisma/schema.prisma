generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  name         String @unique
  email        String     @unique
  passwordHash String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  image  String?
  emailVerified  DateTime?
  Comments     Comment[]
  followers        Follower[] @relation("Followers")
  following        Follower[] @relation("Following") 
  followedCounter  Int        @default(0)             
  followingCounter Int        @default(0) 
  Like         Like[]
  Post         Post[] 
  accounts      Account[]
  sessions      Session[] 
  commentLikes CommentLike[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}
model Follower {
  id          String   @id @default(uuid())
  followerUserId    String  
  followedUserId    String   
  followedAt        DateTime @default(now())

  // Define the relations
  followerUser      User     @relation("Followers", fields: [followerUserId], references: [id])
  followedUser      User     @relation("Following", fields: [followedUserId], references: [id])

  @@unique([followerUserId, followedUserId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  timestamp DateTime @default(now())
  user_id   String
  post_id   String
  post  Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id])
   commentLikes       CommentLike[]
  commentLikesCount    Int       @default(0)
}
model CommentLike{
  id String @id @default(cuid())
  user User @relation(fields:[userId],references: [id])
  userId String
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade) 
  commentId String
}
model Post {
  id           String    @id @default(uuid())
  date         DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  content      String
  image_url    String?
  likeCount    Int       @default(0)
  commentCount Int       @default(0)
  authorId     String
  comments     Comment[]
  likes        Like[]

  author       User      @relation(fields: [authorId], references: [id])
}

model Like {
  id      String   @id @default(uuid())
  user_id String
  post_id String
  date    DateTime @default(now())
  post     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [user_id], references: [id])
}
